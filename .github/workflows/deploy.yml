name: Deploy to VPS

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Check Environment Variables
      run: |
        echo "Checking required environment variables and secrets..."
        
        # Check if secrets are set (without exposing values)
        if [ -z "${{ secrets.VPS_HOST }}" ]; then
          echo "‚ùå VPS_HOST secret is not set"
          exit 1
        else
          echo "‚úÖ VPS_HOST is set"
        fi
        
        if [ -z "${{ secrets.VPS_USER }}" ]; then
          echo "‚ùå VPS_USER secret is not set"
          exit 1
        else
          echo "‚úÖ VPS_USER is set"
        fi
        
        if [ -z "${{ secrets.VPS_SSH_KEY }}" ]; then
          echo "‚ùå VPS_SSH_KEY secret is not set"
          exit 1
        else
          echo "‚úÖ VPS_SSH_KEY is set"
        fi
        
        if [ -z "${{ secrets.ADMIN_EMAIL }}" ]; then
          echo "‚ùå ADMIN_EMAIL secret is not set"
          exit 1
        else
          echo "‚úÖ ADMIN_EMAIL is set"
        fi
        
        if [ -z "${{ secrets.ADMIN_PASSWORD }}" ]; then
          echo "‚ùå ADMIN_PASSWORD secret is not set"
          exit 1
        else
          echo "‚úÖ ADMIN_PASSWORD is set"
        fi
        
        if [ -z "${{ secrets.ADMIN_JWT_SECRET }}" ]; then
          echo "‚ùå ADMIN_JWT_SECRET secret is not set"
          exit 1
        else
          echo "‚úÖ ADMIN_JWT_SECRET is set"
        fi
        
        if [ -z "${{ secrets.NEXT_PUBLIC_APP_URL }}" ]; then
          echo "‚ùå NEXT_PUBLIC_APP_URL secret is not set"
          exit 1
        else
          echo "‚úÖ NEXT_PUBLIC_APP_URL is set"
        fi
        
        if [ -z "${{ secrets.DATABASE_URL }}" ]; then
          echo "‚ùå DATABASE_URL secret is not set"
          exit 1
        else
          echo "‚úÖ DATABASE_URL is set"
        fi
        
        if [ -z "${{ secrets.DIRECT_URL }}" ]; then
          echo "‚ùå DIRECT_URL secret is not set"
          exit 1
        else
          echo "‚úÖ DIRECT_URL is set"
        fi
        
        echo "‚úÖ All required secrets are configured"

    - name: Deploy over SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          cd ~/myapp

          # 1. Sync .env from GitHub secrets
          cat > .env <<EOL
          # PRODUCTION ENVIRONMENT VARIABLES
          DATA_SOURCE=prisma
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}
          NODE_ENV=production
          NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          DIRECT_URL=${{ secrets.DIRECT_URL }}
          EOL

          # 2. Check remote environment
          echo "üîç Checking remote environment..."
          
          # Check if required directories exist
          if [ ! -d ~/myapp ]; then
            echo "‚ùå Application directory ~/myapp does not exist"
            exit 1
          fi
          echo "‚úÖ Application directory exists"
          
          # Check if Docker is available
          if ! command -v docker &> /dev/null; then
            echo "‚ùå Docker is not installed or not accessible"
            exit 1
          fi
          echo "‚úÖ Docker is available"
          
          # Check if Docker Compose is available
          if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
            echo "‚ùå Docker Compose is not installed or not accessible"
            exit 1
          fi
          echo "‚úÖ Docker Compose is available"
          
          # Check disk space (require at least 1GB free)
          AVAILABLE_SPACE=$(df ~/myapp | tail -1 | awk '{print $4}')
          if [ "$AVAILABLE_SPACE" -lt 1048576 ]; then
            echo "‚ùå Insufficient disk space (less than 1GB available)"
            df -h ~/myapp
            exit 1
          fi
          echo "‚úÖ Sufficient disk space available"

          # 3. Make sure repo is clean and up to date
          git fetch origin main
          git reset --hard origin/main

          # 4. Build image with a unique tag (avoids downtime during build)
          DEPLOY_TAG=$(date +%s)
          docker compose build --no-cache --build-arg TAG=$DEPLOY_TAG

          # 5. Run database migrations
          docker compose run --rm app npx prisma migrate deploy

          # 6. Replace running container with new one
          docker compose up -d --no-deps app

          # 7. Cleanup old images
          docker image prune -af
