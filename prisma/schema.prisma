// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
model Event {
  id          String  @id
  name        String  // JSON string for LocalizedString
  startDate   String  @map("start_date")
  endDate     String  @map("end_date")
  status      Boolean
  description String? // JSON string for LocalizedString (optional)
  image       String? // Optional image URL
  aiHint      String? @map("ai_hint") // Optional AI hint (optional)

  // Relations
  orders   Order[]
  checkIns CheckIn[]

  @@map("events")
}

model Product {
  id          String @id
  name        String // JSON string for LocalizedString
  description String // JSON string for LocalizedString
  image       String
  aiHint      String @map("ai_hint")

  @@map("products")
}

model Customer {
  id       String @id
  phone    String @unique
  shopName String @map("shop_name")
  joined   String

  // Relations
  checkIns CheckIn[]

  @@map("customers")
}

model Order {
  orderId   String @id @map("order_id")
  shopName  String @map("shop_name")
  eventId   String @map("event_id")
  products  String // JSON string for OrderProduct[]
  total     Int
  orderDate String @map("order_date")

  // Relations
  event Event @relation(fields: [eventId], references: [id])

  @@map("orders")
}

model CheckIn {
  customerId   String   @map("customer_id")
  shopName     String   @map("shop_name")
  phone        String
  eventId      String   @map("event_id")
  checkInTime  DateTime @default(now()) @map("check_in_time")

  // Relations
  customer Customer @relation(fields: [customerId], references: [id])
  event    Event    @relation(fields: [eventId], references: [id])

  @@id([customerId, eventId])
  @@map("check_ins")
}

// Admin Authentication & User Management Models
model AdminUser {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String   // Hashed password
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  roleId      String   @map("role_id")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  lastLoginAt DateTime? @map("last_login_at")
  createdBy   String?  @map("created_by")

  // Relations
  role    AdminRole @relation(fields: [roleId], references: [id])
  creator AdminUser? @relation("UserCreator", fields: [createdBy], references: [id])
  created AdminUser[] @relation("UserCreator")
  accounts Account[]
  sessions Session[]

  @@map("admin_users")
}

model AdminRole {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String   @map("display_name")
  description String?
  permissions String   // JSON array of permissions
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  users AdminUser[]

  @@map("admin_roles")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user AdminUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         AdminUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
